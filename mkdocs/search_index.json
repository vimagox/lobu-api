{
    "docs": [
        {
            "location": "/", 
            "text": "lobu-api\n\n\n\n\nlobu resources. Check out the project's \ndocumentation\n.\n\n\nPrerequisites\n\n\n\n\nvirtualenv\n\n\npostgresql\n\n\nredis\n\n\ntravis cli\n\n\nheroku toolbelt\n\n\n\n\nInitialize the project\n\n\nCreate and activate a virtualenv:\n\n\nvirtualenv env\nsource env/bin/activate\n\n\n\n\nInstall dependencies:\n\n\npip install -r requirements/local.txt\n\n\n\n\nCreate the database:\n\n\ncreatedb lobu\n\n\n\n\nInitialize the git repository\n\n\ngit init\ngit remote add origin git@github.com:vimagox/lobu-api.git\n\n\n\n\nMigrate, create a superuser, and run the server:\n\n\npython lobu/manage.py migrate\npython lobu/manage.py createsuperuser\npython lobu/manage.py runserver\n\n\n\n\nCreate Servers\n\n\nBy default the included fabfile will setup three environments:\n\n\n\n\ndev -- The bleeding edge of development\n\n\nqa -- For quality assurance testing\n\n\nprod -- For the live application\n\n\n\n\nCreate these servers on Heroku with:\n\n\nfab init\n\n\n\n\nAutomated Deployment\n\n\nDeployment is handled via Travis. When builds pass Travis will automatically deploy that branch to Heroku. Enable this with:\n\n\ntravis encrypt $(heroku auth:token) --add deploy.api_key", 
            "title": "Home"
        }, 
        {
            "location": "/#lobu-api", 
            "text": "lobu resources. Check out the project's  documentation .", 
            "title": "lobu-api"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "virtualenv  postgresql  redis  travis cli  heroku toolbelt", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#initialize-the-project", 
            "text": "Create and activate a virtualenv:  virtualenv env\nsource env/bin/activate  Install dependencies:  pip install -r requirements/local.txt  Create the database:  createdb lobu  Initialize the git repository  git init\ngit remote add origin git@github.com:vimagox/lobu-api.git  Migrate, create a superuser, and run the server:  python lobu/manage.py migrate\npython lobu/manage.py createsuperuser\npython lobu/manage.py runserver", 
            "title": "Initialize the project"
        }, 
        {
            "location": "/#create-servers", 
            "text": "By default the included fabfile will setup three environments:   dev -- The bleeding edge of development  qa -- For quality assurance testing  prod -- For the live application   Create these servers on Heroku with:  fab init", 
            "title": "Create Servers"
        }, 
        {
            "location": "/#automated-deployment", 
            "text": "Deployment is handled via Travis. When builds pass Travis will automatically deploy that branch to Heroku. Enable this with:  travis encrypt $(heroku auth:token) --add deploy.api_key", 
            "title": "Automated Deployment"
        }, 
        {
            "location": "/api/authentication/", 
            "text": "Authentication\n\n\nFor clients to authenticate, the token key should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Token\", with whitespace separating the two strings. For example:\n\n\nAuthorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\n\n\n\n\nUnauthenticated responses that are denied permission will result in an HTTP \n401 Unauthorized\n response with an appropriate \nWWW-Authenticate\n header. For example:\n\n\nWWW-Authenticate: Token\n\n\n\n\nThe curl command line tool may be useful for testing token authenticated APIs. For example:\n\n\ncurl -X GET http://127.0.0.1:8000/api/v1/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b'\n\n\n\n\nRetrieving Tokens\n\n\nAuthorization tokens are issued and returned when a user registers. A registered user can also retrieve their token with the following request:\n\n\nRequest\n:\n\n\nPOST\n \napi-token-auth/\n\n\nParameters:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nstring\n\n\nThe user's username\n\n\n\n\n\n\npassword\n\n\nstring\n\n\nThe user's password\n\n\n\n\n\n\n\n\nResponse\n:\n\n\n{ \n    \ntoken\n : \n9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\n \n}", 
            "title": "Authentication"
        }, 
        {
            "location": "/api/authentication/#authentication", 
            "text": "For clients to authenticate, the token key should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Token\", with whitespace separating the two strings. For example:  Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b  Unauthenticated responses that are denied permission will result in an HTTP  401 Unauthorized  response with an appropriate  WWW-Authenticate  header. For example:  WWW-Authenticate: Token  The curl command line tool may be useful for testing token authenticated APIs. For example:  curl -X GET http://127.0.0.1:8000/api/v1/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b'", 
            "title": "Authentication"
        }, 
        {
            "location": "/api/authentication/#retrieving-tokens", 
            "text": "Authorization tokens are issued and returned when a user registers. A registered user can also retrieve their token with the following request:  Request :  POST   api-token-auth/  Parameters:     Name  Type  Description      username  string  The user's username    password  string  The user's password     Response :  { \n     token  :  9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b  \n}", 
            "title": "Retrieving Tokens"
        }, 
        {
            "location": "/api/users/", 
            "text": "Users\n\n\nSupports registering, viewing, and updating user accounts.\n\n\nRegister a new user account\n\n\nRequest\n:\n\n\nPOST\n \n/users/\n\n\nParameters:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nstring\n\n\nThe username for the new user.\n\n\n\n\n\n\npassword\n\n\nstring\n\n\nThe password for the new user.\n\n\n\n\n\n\n\n\nNote:\n\n\n\n\nNot\n \nAuthorization Protected\n\n\n\n\nResponse\n:\n\n\nContent-Type application/json\n201 Created\n\n{\n  \nid\n: \n6d5f9bae-a31b-4b7b-82c4-3853eda2b011\n,\n  \nusername\n: \nrichard\n,\n  \npassword\n: \npbkdf2_sha256$24000$aGozcCr6QXhv$WCgPt2voqVO+Nno2flVnNnLcfks6Yq8XJyxoadB/r50=\n,\n  \nauth_token\n: \n132cf952e0165a274bf99e115ab483671b3d9ff6\n\n}\n\n\n\n\nThe \nauth_token\n returned with this response should be stored by the client for\nauthenticating future requests to the API. See \nAuthentication\n.\n\n\nGet a user's profile information\n\n\nRequest\n:\n\n\nGET\n \n/users/:id\n\n\nParameters:\n\n\nNote:\n\n\n\n\nAuthorization Protected\n\n\n\n\nResponse\n:\n\n\nContent-Type application/json\n200 OK\n\n{\n  \nid\n: \n6d5f9bae-a31b-4b7b-82c4-3853eda2b011\n,\n  \nusername\n: \nrichard\n,\n  \nfirst_name\n: \nRichard\n,\n  \nlast_name\n: \nHendriks\n\n}\n\n\n\n\nUpdate your profile information\n\n\nRequest\n:\n\n\nPUT/PATCH\n \n/users/:id\n\n\nParameters:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfirst_name\n\n\nstring\n\n\nThe new first_name of the user object.\n\n\n\n\n\n\nlast_name\n\n\nstring\n\n\nThe new last_name of the user object.\n\n\n\n\n\n\n\n\nNote:\n\n\n\n\nAll parameters are optional\n\n\nAuthorization Protected\n\n\n\n\nResponse\n:\n\n\nContent-Type application/json\n200 OK\n\n{\n  \nid\n: \n6d5f9bae-a31b-4b7b-82c4-3853eda2b011\n,\n  \nusername\n: \nrichard\n,\n  \nfirst_name\n: \nRichard\n,\n  \nlast_name\n: \nHendriks\n\n}", 
            "title": "Users"
        }, 
        {
            "location": "/api/users/#users", 
            "text": "Supports registering, viewing, and updating user accounts.", 
            "title": "Users"
        }, 
        {
            "location": "/api/users/#register-a-new-user-account", 
            "text": "Request :  POST   /users/  Parameters:     Name  Type  Description      username  string  The username for the new user.    password  string  The password for the new user.     Note:   Not   Authorization Protected   Response :  Content-Type application/json\n201 Created\n\n{\n   id :  6d5f9bae-a31b-4b7b-82c4-3853eda2b011 ,\n   username :  richard ,\n   password :  pbkdf2_sha256$24000$aGozcCr6QXhv$WCgPt2voqVO+Nno2flVnNnLcfks6Yq8XJyxoadB/r50= ,\n   auth_token :  132cf952e0165a274bf99e115ab483671b3d9ff6 \n}  The  auth_token  returned with this response should be stored by the client for\nauthenticating future requests to the API. See  Authentication .", 
            "title": "Register a new user account"
        }, 
        {
            "location": "/api/users/#get-a-users-profile-information", 
            "text": "Request :  GET   /users/:id  Parameters:  Note:   Authorization Protected   Response :  Content-Type application/json\n200 OK\n\n{\n   id :  6d5f9bae-a31b-4b7b-82c4-3853eda2b011 ,\n   username :  richard ,\n   first_name :  Richard ,\n   last_name :  Hendriks \n}", 
            "title": "Get a user's profile information"
        }, 
        {
            "location": "/api/users/#update-your-profile-information", 
            "text": "Request :  PUT/PATCH   /users/:id  Parameters:     Name  Type  Description      first_name  string  The new first_name of the user object.    last_name  string  The new last_name of the user object.     Note:   All parameters are optional  Authorization Protected   Response :  Content-Type application/json\n200 OK\n\n{\n   id :  6d5f9bae-a31b-4b7b-82c4-3853eda2b011 ,\n   username :  richard ,\n   first_name :  Richard ,\n   last_name :  Hendriks \n}", 
            "title": "Update your profile information"
        }
    ]
}